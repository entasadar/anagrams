package main

import (
	"fmt"
	"github.com/alexflint/go-arg"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"os"

	"anagrams/internal/database"
	"anagrams/internal/handlers"
	"anagrams/internal/logging"
)

var args struct {
	LogLvl  string `help:"logging level (e.g. INFO, DEBUG,...)" default:"DEBUG" arg:"env"`
	LogPath string `help:"path to log file (generated by default)" default:""`
	Redis   string `help:"redis host" default:"192.168.78.78:6379" arg:"env"`
	Port    int    `help:"port for web service" default:"8080" arg:"env"`
}

func main() {
	arg.MustParse(&args)
	LoggingLevel, err := logrus.ParseLevel(args.LogLvl)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	if err = logging.InitLogger(args.LogPath, LoggingLevel); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	logger := logging.GetLogger("main")

	if err = database.InitRedis(args.Redis); err != nil {
		logger.Error(fmt.Sprintf("Redis connection error: %v", err))
		os.Exit(1)
	}

	router := gin.Default()

	router.GET("/get", handlers.Get)
	router.POST("/load", handlers.Load)
	router.PATCH("/load", handlers.Add)

	if err = router.Run(fmt.Sprintf(":%d", args.Port)); err != nil {
		logger.Error("Failed start the server")
		os.Exit(1)
	}
}
